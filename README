
******************
November 12 2019
RegAligner is back on track! Because Google tried to help Mikhail Gorbachev!

There have been plenty of changes, and I will publish stuff that would give a paper. You won't get all I did, though.
******************


*********
As of November 28 2013, RegAligner is DISCONTINUED.
The main author has permanently left academic research. He may react to e-mails
*********



This toolkit primarily implements the papers

[Schoenemann, CoNLL 2011] (Viterbi-mode, with or without L0 regularity and dictionary prior)

[Schoenemann, IJCNLP 2011] (penalization of mass, gradient descent)

[Schoenemann, ACL 2013] (nondeficient modes for IBM-3 and IBM-4)

and

[Schoenemann, CoNLL 2010] (IBM-3 Viterbi alignments via ILP)

with additional features. It also reimplements the paper [Vaswani, Huang,
Chiang ACL 2012], which uses L0-norms together with EM.


At the same time, it is an adequate replacement for GIZA++ as the models IBM 1-5 and HMM are implemented. 

There are a few restrictions:
- The IBM-2 will probably extended (estimation of p0).
- pegging is not implemented (and usually too slow, anyway)
- smoothing (e.g. for HMMs) is not implemented
- we do not implement Model 6

On the other hand, there are some additional features:
- implementation of regularity terms (weighted L_0 and weighted L_1), including a dictionary prior
- the EM-algorithm for parametric HMMs is closer to the model (see [Schoenemann, IJCNLP 2011])
	and we implement an HMM with classes
- the fertility models allow to pool the fertility probabilities via fertility classes
- IBM-3 allows a reduction of the alignment parameters by pooling over all sentence lengths.
- variants of IBM-4 where instead of the center of a cept one can take the head or the tail
- variants of word class modes for inter (IBM-4) and intra distortion (IBM-4/5)
- we implement posterior decoding (not active by default)
- refined Viterbi training mode with ICM stage (useful with L_0-norms)
- training the IBM-3 with the ITG constraints and the IBM constraints is supported (and run in Viterbi mode)
- computation of IBM-3 Viterbi alignments via ILPs is integrated [Schoenemann CoNLL 2010]
- we use long double precision, and still we are faster than GIZA++ (with faster dictionary access)

BUILDING REGALIGNER

A sample Makefile has been provided, but you will most likely have to modify it. 

DEPENDENCIES

There are no mandatory dependencies. 

If you want to be able to read zipped files, you need to download the gzstream classes from the 
University of North Carolina: http://www.cs.unc.edu/Research/compgeom/gzstream/ . To use this class, 
add -DHAS_GZSTREAM to the compiler options and link against gzstream. Make sure that you are using these 
classes in accordance with the respective license conditions.

Also you can include the Integer Linear Programming project CBC: https://projects.coin-or.org/Cbc
This is needed for the computation of IBM-3 Viterbi alignments (with near exactness). Make sure that you are 
using CBC in accordance with its respective license conditions.

USING REGALIGNER

See doc/INTRODUCTION for the most commonly used options.

CREDITS

RegAligner was written by Thomas Schoenemann, mostly in his free time, but also at Lund University, Sweden, and 
at the University of DÃ¼sseldorf, Germany.
